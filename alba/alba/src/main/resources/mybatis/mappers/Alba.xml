<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.dao.AlbaDAO">

	<sql id="fromFrag">
		from alba
			inner join grade on (alba.gr_code = grade.gr_code)
			left outer join lic_alba on (alba.al_id = lic_alba.al_id)
			left outer join license on (lic_alba.lic_code = license.lic_code)
	</sql>
	<sql id="searchFrag">
		<where>
			<if test="simpleSearch!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleSearch.searchWord)">
				<choose>
					<when test="simpleSearch.searchType eq 'al_name'">
						INSTR(AL_NAME, #{simpleSearch.searchWord}) > 0 
					</when>
					<when test="simpleSearch.searchType eq 'al_addr1'">
						INSTR(AL_ADDR1, #{simpleSearch.searchWord}) > 0 
					</when>
					<when test="simpleSearch.searchType eq 'al_career'">
						INSTR(AL_CAREER, #{simpleSearch.searchWord}) > 0 
					</when>
					<otherwise>
						INSTR(AL_NAME, #{simpleSearch.searchWord}) > 0 
						OR 
						INSTR(AL_ADDR1, #{simpleSearch.searchWord}) > 0 
						OR
						INSTR(AL_CAREER, #{simpleSearch.searchWord}) > 0 
					</otherwise>
				</choose>
			</if>
			<if test="detailSearch neq null">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.al_gen)">
					AND AL_GEN = #{detailSearch.al_gen}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.gr_code)">
					AND ALBA.GR_CODE = #{detailSearch.gr_code}
				</if>
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleSearch.lic_code)">
				AND LIC_ALBA.LIC_CODE = #{simpleSearch.lic_code}
			</if>
		</where>
	</sql>
	
	<delete id="deleteAlba" parameterType="String">
		delete from alba
		where al_id = #{al_id}
	</delete>
	
	<update id="updateAlba" parameterType="AlbaVO">
		UPDATE ALBA
		SET
			AL_NAME = #{al_name, jdbcType=VARCHAR},	
			AL_AGE = #{al_age, jdbcType=NUMERIC},	
			AL_ZIP = #{al_zip, jdbcType=VARCHAR},
			AL_ADDR1 = #{al_addr1, jdbcType=VARCHAR},		
			AL_ADDR2 = #{al_addr2, jdbcType=VARCHAR},		
			AL_HP = #{al_hp, jdbcType=VARCHAR},			
			GR_CODE = #{gr_code, jdbcType=VARCHAR},	
			AL_GEN = #{al_gen, jdbcType=VARCHAR},		
			AL_MAIL = #{al_mail, jdbcType=VARCHAR},		
			AL_CAREER = #{al_career, jdbcType=VARCHAR},	
			AL_SPEC = #{al_spec, jdbcType=VARCHAR},	
			AL_DESC = #{al_desc, jdbcType=VARCHAR}
			<if test="al_img != null">
			, AL_IMG = #{al_img, jdbcType=VARCHAR}
			</if>
		WHERE AL_ID = #{al_id, jdbcType=VARCHAR}
	</update>
	
	<insert id="insertAlba" parameterType="AlbaVO">
		
		<selectKey resultType="string" order="BEFORE" keyProperty="al_id">
			select concat('A', LPAD(max(cast(substr(al_id,2) as unsigned integer)) +1,7,'0') )
			from alba
		</selectKey>
		
		INSERT INTO ALBA
			(
				AL_ID,	
				AL_NAME,		
				AL_AGE,	
				AL_ZIP,	
				AL_ADDR1,		
				AL_ADDR2,		
				AL_HP,			
				GR_CODE,	
				AL_GEN,		
				AL_MAIL,		
				AL_CAREER,	
				AL_SPEC,	
				AL_DESC,	
				AL_IMG
			)
			VALUES(
				#{al_id, jdbcType=VARCHAR}, 	
				#{al_name, jdbcType=VARCHAR},		
				#{al_age, jdbcType=NUMERIC},	
				#{al_zip, jdbcType=VARCHAR},	
				#{al_addr1, jdbcType=VARCHAR},		
				#{al_addr2, jdbcType=VARCHAR},		
				#{al_hp, jdbcType=VARCHAR},			
				#{gr_code, jdbcType=VARCHAR},	
				#{al_gen, jdbcType=VARCHAR},		
				#{al_mail, jdbcType=VARCHAR},		
				#{al_career, jdbcType=VARCHAR},	
				#{al_spec, jdbcType=VARCHAR},	
				#{al_desc, jdbcType=VARCHAR},	
				#{al_img, jdbcType=VARCHAR}
			)
	</insert>
	
	<resultMap type="AlbaVO" id="albaMap" autoMapping="true">
		<id property="al_id" column="AL_ID"/>
		<collection property="licenseList" ofType="LicenseVO" javaType="java.util.Set" autoMapping="true">
			<id property="lic_code" column="LIC_CODE"/>
		</collection>
	</resultMap>

	<select id="selectAlbaList" parameterType="PagingVO" resultMap="albaMap">
		select B.*
		from (
			select @rownum:=@rownum+1 as no,A.*
			from	(
					select ALBA.AL_ID, AL_NAME, AL_ADDR1, AL_HP, AL_GEN, AL_MAIL,AL_IMG,GR_NAME
					<choose>
						<when test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleSearch.lic_code)">
							,LIC_ALBA.LIC_CODE
							<include refid="fromFrag"/>
						</when>
						<otherwise>
						from alba
								INNER JOIN GRADE ON (ALBA.GR_CODE = GRADE.GR_CODE)
						</otherwise>
					</choose>
					<include refid="searchFrag"/>	
					ORDER BY AL_ID desc
					)A, (select @rownum:=0) temp
			) B
		LIMIT #{startRow},#{screenSize}
	</select>
	
	<select id="selectTotalRecord" parameterType="pagingVO" resultType="int">
		SELECT COUNT(*)
		FROM(
			SELECT DISTINCT ALBA.AL_ID
			<include refid="fromFrag"/>
			<include refid="searchFrag"/>
			GROUP BY ALBA.AL_ID
		)A
	</select>
	
	<select id="selectAlba" parameterType="string" resultMap="albaMap">
		SELECT ALBA.AL_ID, AL_NAME, AL_AGE, AL_ZIP, AL_ADDR1, AL_ADDR2, AL_DESC
				, AL_HP, ALBA.GR_CODE, AL_GEN,AL_MAIL, AL_CAREER, AL_SPEC, AL_IMG
				, GR_NAME
				, LIC_ALBA.LIC_CODE, LIC_ALBA.LIC_DATE, LIC_ALBA.LIC_IMG
				, LICENSE.LIC_NAME
		<include refid="fromFrag"/>
		WHERE alba.AL_ID = #{al_id}
	</select>
</mapper>